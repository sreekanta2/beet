// --- Configuration ---
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "postgresql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}

// --- Enums ---

enum Role {
  user
  shoper
  admin
}

enum BadgeLevel {
  NONE
  SILVER
  PLATINUM
  GOLDEN
  DIAMOND
}

enum TransactionType {
  MANUAL
  CLUB_CREATION_SPEND
  REFERRAL_TEAM_INCOME
  REFERRAL_CLUB_INCOME
  REFERRAL_SIGNUP_BONUS
  CLUB_BONUS
  ROYALTY_DAILY
  TRANSFER_IN
  SHOPER_FEE_EARNED
  TRANSFER_OUT
}

enum TransferStatus {
  PENDING
  COMPLETED
  FAILED
}

// --- Core Models ---

model User {
  id               String   @id @default(cuid())
  name             String?
  telephone        String?  @unique
  email            String?
  password         String?
  referralCode     String?  @unique
  role             Role     @default(user)
  lastIncomeUpdate DateTime @default(now())

  emailVerified DateTime?
  serialNumber  Int       @default(0)
  // Self-relation (Referrals)
  referredById  String?
  referredBy    User?     @relation("UserReferrals", fields: [referredById], references: [id], onDelete: Restrict, onUpdate: Restrict)
  referrals     User[]    @relation("UserReferrals")

  deposit Float @default(0)

  teamIncome  Float @default(0)
  clubsIncome Float @default(0)
  clubsBonus  Float @default(0)

  royaltyIncome    Float      @default(0)
  totalBalance     Float      @default(0)
  cachedClubsCount Int        @default(0)
  badgeLevel       BadgeLevel @default(NONE)

  // Relations
  pointTransactions    PointTransaction[]
  clubs                Club[]
  mobileBankingService MobileBankingService[]
  shop                 Shop?
  // Auth
  accounts             Account[]
  sessions             Session[]

  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  additionalInfo Additional?
  withdraw       Withdraw[]

  @@index([referredById])
  @@index([role])
}

model Shop {
  id                 String   @id @default(cuid())
  userId             String   @unique
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  branch             String?
  shopName           String
  division           String
  district           String
  upazila            String
  calculationType    String
  calculationAmmount Decimal  @db.Decimal(10, 2)
  agree              Boolean  @default(false)
  // Timestamps
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  @@index([userId])
}

model Additional {
  id             String  @id @default(cuid())
  userId         String  @unique
  user           User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  country        String
  nid            String
  nomineId       String?
  nomineName     String?
  nominiRelation String?
  division       String
  district       String
  upazila        String
  category       String
  location       String

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Club {
  id           String   @id @default(cuid())
  serialNumber Int      @default(0)
  source       String?
  ownerId      String
  owner        User     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  bonusAmount  String?
  createdAt    DateTime @default(now())

  clubsBonus ClubsBonus[]

  @@index([ownerId])
}

model PointTransaction {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  amount Int
  type   TransactionType

  meta      Json?
  createdAt DateTime @default(now())

  @@index([userId])
  @@index([type])
}

model ClubsBonus {
  id        String   @id @default(cuid())
  userId    String
  clubId    String
  club      Club     @relation(fields: [clubId], references: [id], onDelete: Cascade)
  amount    Int
  status    String
  createdAt DateTime @default(now())

  @@index([clubId])
  @@index([userId])
}

model MobileBankingService {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  name   String
  number String

  withdrawals Withdraw[] // ðŸ”— one MobileBankingService â†’ many Withdraw

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
}

model Withdraw {
  id     String @id @default(cuid())
  userId String
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  mobileBankingServiceId String
  mobileBankingService   MobileBankingService @relation(fields: [mobileBankingServiceId], references: [id], onDelete: Cascade)

  amount Float
  status WithdrawStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([userId])
  @@index([mobileBankingServiceId])
}

enum WithdrawStatus {
  PENDING
  APPROVED
  REJECTED
  COMPLETED
}

// --- Auth Models ---

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model Otp {
  id        String   @id @default(cuid())
  userId    String
  otp       String
  amount    Float
  createdAt DateTime @default(now())
  expiresAt DateTime
}
